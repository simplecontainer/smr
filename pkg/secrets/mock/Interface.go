// Code generated by MockGen. DO NOT EDIT.
// Source: Interface.go

// Package mock_objects is a generated GoMock package.
package mock_objects

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	f "github.com/simplecontainer/smr/pkg/f"
)

// MockObjectInterface is a mock of ObjectInterface interface.
type MockObjectInterface struct {
	ctrl     *gomock.Controller
	recorder *MockObjectInterfaceMockRecorder
}

// MockObjectInterfaceMockRecorder is the mock recorder for MockObjectInterface.
type MockObjectInterfaceMockRecorder struct {
	mock *MockObjectInterface
}

// NewMockObjectInterface creates a new mock instance.
func NewMockObjectInterface(ctrl *gomock.Controller) *MockObjectInterface {
	mock := &MockObjectInterface{ctrl: ctrl}
	mock.recorder = &MockObjectInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectInterface) EXPECT() *MockObjectInterfaceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockObjectInterface) Add(format *f.Format, data string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", format, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockObjectInterfaceMockRecorder) Add(format, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockObjectInterface)(nil).Add), format, data)
}

// ChangeDetected mocks base method.
func (m *MockObjectInterface) ChangeDetected() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeDetected")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ChangeDetected indicates an expected call of ChangeDetected.
func (mr *MockObjectInterfaceMockRecorder) ChangeDetected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeDetected", reflect.TypeOf((*MockObjectInterface)(nil).ChangeDetected))
}

// Diff mocks base method.
func (m *MockObjectInterface) Diff(definition string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Diff", definition)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Diff indicates an expected call of Diff.
func (mr *MockObjectInterfaceMockRecorder) Diff(definition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Diff", reflect.TypeOf((*MockObjectInterface)(nil).Diff), definition)
}

// Exists mocks base method.
func (m *MockObjectInterface) Exists() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockObjectInterfaceMockRecorder) Exists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockObjectInterface)(nil).Exists))
}

// Find mocks base method.
func (m *MockObjectInterface) Find(format *f.Format) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", format)
	ret0, _ := ret[0].(error)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockObjectInterfaceMockRecorder) Find(format interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockObjectInterface)(nil).Find), format)
}

// GetDefinition mocks base method.
func (m *MockObjectInterface) GetDefinition() map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefinition")
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// GetDefinition indicates an expected call of GetDefinition.
func (mr *MockObjectInterfaceMockRecorder) GetDefinition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefinition", reflect.TypeOf((*MockObjectInterface)(nil).GetDefinition))
}

// GetDefinitionByte mocks base method.
func (m *MockObjectInterface) GetDefinitionByte() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefinitionByte")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetDefinitionByte indicates an expected call of GetDefinitionByte.
func (mr *MockObjectInterfaceMockRecorder) GetDefinitionByte() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefinitionByte", reflect.TypeOf((*MockObjectInterface)(nil).GetDefinitionByte))
}

// GetDefinitionString mocks base method.
func (m *MockObjectInterface) GetDefinitionString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefinitionString")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDefinitionString indicates an expected call of GetDefinitionString.
func (mr *MockObjectInterfaceMockRecorder) GetDefinitionString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefinitionString", reflect.TypeOf((*MockObjectInterface)(nil).GetDefinitionString))
}

// Remove mocks base method.
func (m *MockObjectInterface) Remove(format *f.Format) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", format)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Remove indicates an expected call of Remove.
func (mr *MockObjectInterfaceMockRecorder) Remove(format interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockObjectInterface)(nil).Remove), format)
}

// Update mocks base method.
func (m *MockObjectInterface) Update(format *f.Format, data string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", format, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockObjectInterfaceMockRecorder) Update(format, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockObjectInterface)(nil).Update), format, data)
}
